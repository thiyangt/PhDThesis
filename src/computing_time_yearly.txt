
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # yearly data time to compute forecasts
> 
> # pkges
> library(forecast)
> library(forecTheta)
> library(seer)
> library(microbenchmark)
> library(randomForest)
> 
> # data
> load("dataThesis/yearly_subset.rda")
> 
> 
> ## rw
> ## using for loop
> forrw_ts <- function(){
+  for (i in 1:100){
+     rw_fit <- rwf(yearly_subset[[i]]$x, drift=FALSE, h=6)
+   }
+ }
> microbenchmark(forrw_ts(), times=100)
Unit: milliseconds
       expr      min       lq     mean   median       uq      max neval
 forrw_ts() 157.2931 159.1544 161.6992 160.6897 161.4414 224.2149   100
> 
> ## rwd
> rwd_ts <- function(){
+   for (i in 1:100){
+     rwd_fit <- rwf(yearly_subset[[i]]$x, drift=TRUE, h=6)
+   }
+   
+ }
> microbenchmark(rwd_ts(), times=100)
Unit: milliseconds
     expr      min       lq     mean   median       uq      max neval
 rwd_ts() 235.2651 237.6614 242.8043 240.1546 241.4291 382.5197   100
> 
> ## wn
> wn_ts <- function(){
+   for (i in 1:100){
+     wn_fit <- auto.arima(yearly_subset[[i]]$x, d=0, D=0, max.p=0, max.q=0, max.Q=0, max.P=0)
+   }
+   
+ }
> microbenchmark(wn_ts(), times=100)
Unit: milliseconds
    expr      min       lq     mean   median       uq      max neval
 wn_ts() 499.2814 507.4647 518.9477 511.8511 515.9641 665.5042   100
> 
> ## theta
> theta_ts <- function(){
+   for (i in 1:100){
+     theta_fit <- thetaf(yearly_subset[[i]]$x)
+     forecastTHETA <- forecast(theta_fit, 6)
+   }
+   
+ }
> 
> microbenchmark(theta_ts(), times=100)
Unit: milliseconds
       expr      min       lq     mean   median       uq      max neval
 theta_ts() 269.1787 273.5492 276.1081 274.8259 276.0281 403.8172   100
> 
> ## nn
> nn_ts <- function(){
+   for (i in 1:100){
+     nn_fit <- nnetar(yearly_subset[[i]]$x)
+     forecastETS <- forecast(nn_fit, 6)
+   }
+   
+ }
> 
> microbenchmark(nn_ts(), times=100)
Unit: seconds
    expr      min       lq     mean   median      uq      max neval
 nn_ts() 1.882605 1.919837 1.950691 1.940509 1.96074 2.210886   100
> 
> ##  ets
> 
> ets_ts <- function(){
+   for (i in 1:100){
+     ets_fit <- ets(yearly_subset[[i]]$x)
+     forecastETS <- forecast(ets_fit, 6)
+   }
+   
+ }
> 
> microbenchmark(ets_ts(), times=100)
Unit: milliseconds
     expr      min       lq     mean   median       uq      max neval
 ets_ts() 946.8228 952.7014 966.4816 958.7167 964.7186 1187.623   100
> 
> ## auto.arima
> arima_ts <- function(){
+   for (i in 1:100){
+     arima_fit <- auto.arima(yearly_subset[[i]]$x)
+     forecastETS <- forecast(arima_fit, 6)
+   }
+   
+ }
> 
> microbenchmark(arima_ts(), times=100)
Unit: seconds
       expr      min      lq     mean   median       uq      max neval
 arima_ts() 4.942483 5.06758 5.132082 5.151796 5.197984 5.305896   100
> 
> ## fforms - without forecasts
> #load("phdproject2/rfu_m4yearly.rda")
> 
> #fforms_ts_noforecast <- function(){
> #  featureCal <- cal_features(yearly_subset, database = "M4", h=6, highfreq = FALSE)
> #  predModels <- predict(rf, featureCal)
>   
> #}
> 
> #microbenchmark(fforms_ts_noforecast(), times=100)
> 
> ## fforms - with forecasts
> #load("phdproject2/rfu_m4yearly.rda")
> 
> #fforms_ts <- function(){
> #  featureCal <- cal_features(yearly_subset[1], database = "M4", h=6, highfreq = FALSE)
> #  predModels <- predict(rf, featureCal)
> #  forecastFFORMS <- rf_forecast(predictions = predModels, tslist = yearly_subset,
> #                                database = "M4",
> #                                function_name = "cal_MASE",
> #                                h=6,
> #                                accuracy = FALSE)
> #
> #}
> 
> #microbenchmark(fforms_ts(), times=100)
> 
